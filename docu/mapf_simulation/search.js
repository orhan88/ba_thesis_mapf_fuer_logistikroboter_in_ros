window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "mapf_simulation", "modulename": "mapf_simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action", "modulename": "mapf_simulation.action", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Number", "modulename": "mapf_simulation.action", "qualname": "Number", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Number.__init__", "modulename": "mapf_simulation.action", "qualname": "Number.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span></span>)</span>"}, {"fullname": "mapf_simulation.action.Number.number", "modulename": "mapf_simulation.action", "qualname": "Number.number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Number.get_number", "modulename": "mapf_simulation.action", "qualname": "Number.get_number", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.action.Name", "modulename": "mapf_simulation.action", "qualname": "Name", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Name.__init__", "modulename": "mapf_simulation.action", "qualname": "Name.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span>)</span>"}, {"fullname": "mapf_simulation.action.Name.name", "modulename": "mapf_simulation.action", "qualname": "Name.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Name.get_name", "modulename": "mapf_simulation.action", "qualname": "Name.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.action.Move", "modulename": "mapf_simulation.action", "qualname": "Move", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Move.__init__", "modulename": "mapf_simulation.action", "qualname": "Move.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">move_x</span>, </span><span class=\"param\"><span class=\"n\">move_y</span></span>)</span>"}, {"fullname": "mapf_simulation.action.Move.arguments", "modulename": "mapf_simulation.action", "qualname": "Move.arguments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Move.get_value", "modulename": "mapf_simulation.action", "qualname": "Move.get_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.action.Action", "modulename": "mapf_simulation.action", "qualname": "Action", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Action.__init__", "modulename": "mapf_simulation.action", "qualname": "Action.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">move_x</span>, </span><span class=\"param\"><span class=\"n\">move_y</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;move&#39;</span></span>)</span>"}, {"fullname": "mapf_simulation.action.Action.arguments", "modulename": "mapf_simulation.action", "qualname": "Action.arguments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.action.Action.get_name", "modulename": "mapf_simulation.action", "qualname": "Action.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.action.Action.get_value", "modulename": "mapf_simulation.action", "qualname": "Action.get_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.configuration", "modulename": "mapf_simulation.configuration", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.configuration.ConfigEntry", "modulename": "mapf_simulation.configuration", "qualname": "ConfigEntry", "kind": "class", "doc": "<p>This class represents an entry in the configuration of the simulation. <br />\nEvery entry stores the following values: </p>\n\n<ul>\n<li>display name</li>\n<li>default value</li>\n<li>current value</li>\n<li>and to_string() method</li>\n</ul>\n"}, {"fullname": "mapf_simulation.configuration.ConfigEntry.__init__", "modulename": "mapf_simulation.configuration", "qualname": "ConfigEntry.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">default_value</span>, </span><span class=\"param\"><span class=\"n\">to_string</span>, </span><span class=\"param\"><span class=\"n\">display_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "mapf_simulation.configuration.ConfigEntry.display_name", "modulename": "mapf_simulation.configuration", "qualname": "ConfigEntry.display_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.configuration.ConfigEntry.default_value", "modulename": "mapf_simulation.configuration", "qualname": "ConfigEntry.default_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.configuration.ConfigEntry.current_value", "modulename": "mapf_simulation.configuration", "qualname": "ConfigEntry.current_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.configuration.ConfigEntry.to_string", "modulename": "mapf_simulation.configuration", "qualname": "ConfigEntry.to_string", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.configuration.Configuration", "modulename": "mapf_simulation.configuration", "qualname": "Configuration", "kind": "class", "doc": "<p>This class provides a configuration of the simulation with default values.</p>\n"}, {"fullname": "mapf_simulation.configuration.Configuration.__init__", "modulename": "mapf_simulation.configuration", "qualname": "Configuration.__init__", "kind": "function", "doc": "<p>Create a configuration!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  -  command line arguments (Not used!)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "mapf_simulation.configuration.Configuration.init_defaults", "modulename": "mapf_simulation.configuration", "qualname": "Configuration.init_defaults", "kind": "function", "doc": "<p>This function sets the variables in the configuration to default values.\nThere are multiple sections of options like \"color\" or \"display\".\nEvery section contains several options which can be changed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  -  command line arguments (Not used!)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.configuration.Configuration.get", "modulename": "mapf_simulation.configuration", "qualname": "Configuration.get", "kind": "function", "doc": "<p>Return the value of a specific option from the configuration. <br />\nThere are multiple sections of options in the configuration (\"color\", \"display\" ..). <br />\nEvery section contains several options which can be changed.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>section</strong>:      str -   The section to which the option belongs</li>\n<li><strong>option</strong>:       str -   The option whose value should be returned</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value of the option in the configuration</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">section</span>, </span><span class=\"param\"><span class=\"n\">option</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.control", "modulename": "mapf_simulation.control", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.control.VisualizerWindow", "modulename": "mapf_simulation.control", "qualname": "VisualizerWindow", "kind": "class", "doc": "<p>This class represents the GUI-application</p>\n", "bases": "PyQt5.QtWidgets.QMainWindow"}, {"fullname": "mapf_simulation.control.VisualizerWindow.__init__", "modulename": "mapf_simulation.control", "qualname": "VisualizerWindow.__init__", "kind": "function", "doc": "<p>Creates the GUI-application</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "mapf_simulation.control.VisualizerWindow.init_gui", "modulename": "mapf_simulation.control", "qualname": "VisualizerWindow.init_gui", "kind": "function", "doc": "<p>This function initializes the GUI-elements</p>\n\n<ul>\n<li>Left:   buttons and other GUI-elements for the interaction with the user</li>\n<li>Center: area for the visualization of the simulation</li>\n<li>Right:  table for more detailed information about the robots</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.control.VisualizerWindow.init_menu", "modulename": "mapf_simulation.control", "qualname": "VisualizerWindow.init_menu", "kind": "function", "doc": "<p>This function initializes the menus in the main window. \nThis function is not necessary and is used for demonstration purposes only. Following menus will be created:</p>\n\n<ul>\n<li>Menu: File->Exit  </li>\n<li>Menu: Tools</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.control.VisualizerWindow.closeEvent", "modulename": "mapf_simulation.control", "qualname": "VisualizerWindow.closeEvent", "kind": "function", "doc": "<p>This function is beeing called when the window closes!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.control.VizControl", "modulename": "mapf_simulation.control", "qualname": "VizControl", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.control.VizControl.run", "modulename": "mapf_simulation.control", "qualname": "VizControl.run", "kind": "function", "doc": "<p>This function initializes ROS2 and runs the GUI-application</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui", "modulename": "mapf_simulation.gui", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.gui.LeftSideWidget", "modulename": "mapf_simulation.gui", "qualname": "LeftSideWidget", "kind": "class", "doc": "<p>This class represents the left side of the GUI. It provides graphical elements/interfaces \nfor the user to interact with the simulation.\nThe left side can be divided into the following four clusters:</p>\n\n<ul>\n<li>LoadFilesWidget (for loading the files)</li>\n<li>SimulationWidget (to start/stop/adjust the simulation)</li>\n<li>ZoomWidget (for visual settings)</li>\n<li>OthersWidget (for the rest)</li>\n</ul>\n", "bases": "VizWidget"}, {"fullname": "mapf_simulation.gui.LeftSideWidget.__init__", "modulename": "mapf_simulation.gui", "qualname": "LeftSideWidget.__init__", "kind": "function", "doc": "<p>Creates the following widgets: LoadFilesWidget, SimulationWidget, ZoomWidget, OthersWidget <br />\nCreates a vertical QSplitter element and adds the four widgets to QSplitter <br />\nAdjusts the size of the widgets inside the QSplitter</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "mapf_simulation.gui.LeftSideWidget.set_model_view", "modulename": "mapf_simulation.gui", "qualname": "LeftSideWidget.set_model_view", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LeftSideWidget.set_model", "modulename": "mapf_simulation.gui", "qualname": "LeftSideWidget.set_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LeftSideWidget.resizeEvent", "modulename": "mapf_simulation.gui", "qualname": "LeftSideWidget.resizeEvent", "kind": "function", "doc": "<p>resizeEvent(self, QResizeEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.RightSideWidget", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget", "kind": "class", "doc": "<p>This class represents the right side of the GUI. It provides a table with detailed information \nabout the robots.</p>\n", "bases": "VizWidget"}, {"fullname": "mapf_simulation.gui.RightSideWidget.__init__", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.__init__", "kind": "function", "doc": "<p>Creates a QTableWidget with the following horizontal header labels: <br />\nRobot ID, Position, Start, Goal, Step, Last action, Heuristics, Bucket</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "mapf_simulation.gui.RightSideWidget.set_model_view", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.set_model_view", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.RightSideWidget.set_model", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.set_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.RightSideWidget.set_item_text", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.set_item_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column</span>, </span><span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">brush</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.RightSideWidget.on_selection_changed", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.on_selection_changed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.RightSideWidget.resizeEvent", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.resizeEvent", "kind": "function", "doc": "<p>resizeEvent(self, QResizeEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.RightSideWidget.selectRow", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.selectRow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span>, </span><span class=\"param\"><span class=\"n\">select</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.RightSideWidget.update", "modulename": "mapf_simulation.gui", "qualname": "RightSideWidget.update", "kind": "function", "doc": "<p>update(self)\nupdate(self, QRect)\nupdate(self, QRegion)\nupdate(self, int, int, int, int)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget", "kind": "class", "doc": "<p>This widget offers buttons and other elements for the loading of the .map and .scen files. \nIt is usually placed on the top on the left side of the window.</p>\n\n<p>Elements:</p>\n\n<ul>\n<li>Button:     for loading the .map file</li>\n<li>Button:     for loading the .scen file</li>\n<li>SpinBox:    for setting the number of the agents</li>\n<li>TextEdit:   for setting the list of buckets before loading the .scen file</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.__init__", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.__init__", "kind": "function", "doc": "<p>Creates the widget</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.set_model", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.set_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.set_model_view", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.set_model_view", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.open_file_dialog", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.open_file_dialog", "kind": "function", "doc": "<p>This function opens a QFileDialog. <br />\nThe function although adapts the title and file filters depending on what type of files should be opened\n(.map or .scene)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mode</strong>:  PySide2.QtWidgets.QFileDialog.AcceptMode <br />\n(QFileDialog.AcceptOpen or QFileDialog.AcceptSave)</li>\n<li><strong>function</strong>:  - function that should be executed after selecting the file</li>\n<li><strong>source</strong>:  - shows what type of file should be opened (\"map\" or \"scene\")</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span>, </span><span class=\"param\"><span class=\"n\">function</span>, </span><span class=\"param\"><span class=\"n\">source</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.load_map", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.load_map", "kind": "function", "doc": "<p>This function loads the .map file. <br />\nThe function is called when the button \"Open Map File\" is pressed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.load_scene", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.load_scene", "kind": "function", "doc": "<p>This function loads the .scen file. <br />\nThe function is called when the button \"Open Agents File\" is pressed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.number_agents_changed", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.number_agents_changed", "kind": "function", "doc": "<p>This function gets called when the number of agents in the QSpinBox \"Agents[number]\" has been changed.\nThe function checks whether the input is valid. <br />\nIf the number is valid then the number of robots will be updated.\nOtherwise the number will be set to the previuos value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.number_bucket_changed", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.number_bucket_changed", "kind": "function", "doc": "<p>This function gets called when the input in TextEdit \"Bucket[number]\" has been modified. <br />\nThe function checks whether the input string contains only the following characters: 0-9 ; and - <br />\nIf the input is invalid then it will be set to the previuos value.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>, if the input is valid <br />\n  <strong>False</strong>, if the input is not valid</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.LoadFilesWidget.check_bucket_input", "modulename": "mapf_simulation.gui", "qualname": "LoadFilesWidget.check_bucket_input", "kind": "function", "doc": "<p>This function checks whether the input string fur buckets matches the following regular expression:  </p>\n\n<blockquote>\n  <p>(^([0-9\\;])<em>(([0-9])+(-)?([0-9\\;])+)</em>(([0-9\\;])*)$)+  </p>\n</blockquote>\n\n<p>Explanation:</p>\n\n<blockquote>\n  <p>input starts with 0-9 or ;       ^([0-9\\;])* <br />\n    input ends with 0-9 or ;         (([0-9\\;])*)$ <br />\n    in the middle 0, 1 or multipal expressions of type: x-x and x, like 11-14 or 2-8, 7, all separated by a semicolon ;      </p>\n</blockquote>\n\n<p>Valid Examples:</p>\n\n<blockquote>\n  <p>7        --> bucket 7 <br />\n    4;6      --> buckets 4 and 6 <br />\n    1-3;6-10 --> buckets 1,2,3, 6,7,8,9,10  </p>\n</blockquote>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>, if the input string matches the regular expression <br />\n  <strong>False</strong>, otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget", "kind": "class", "doc": "<p>This widget offers following elements:</p>\n\n<ul>\n<li>button \"Start/Stop Sim\" for starting/stopping the simulation</li>\n<li>buttons \"&lt;\", \">\", \"|&lt;\", \">|\" for navigation through the steps</li>\n<li>buttons  \"UP\" and \"DOWN\" to adjust the speed of the simulation</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "mapf_simulation.gui.SimulationWidget.set_model_view", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.set_model_view", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.update", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.update", "kind": "function", "doc": "<p>The function is called when the widget (self) should be updated. <br />\nDepending on whether the simulation is running:</p>\n\n<ul>\n<li>sets the right text for the button \"Start/Stop Sim\" </li>\n<li>enables / disables several features in the gui</li>\n<li>updates the output for speed in the widget (QTextEdit) \nin the case the speed of the simulation has been changed outside</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.on_pause", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.on_pause", "kind": "function", "doc": "<p>The function is called when the button \"Start Sim\" (or \"Stop Sim\") is pressed. <br />\nIf the simulation is running then:  </p>\n\n<ul>\n<li>stop the process by switching the timer in the model_view (stops the timer)</li>\n<li>enable several features in the gui for the time the simulation is not running</li>\n</ul>\n\n<p>If the simulation is not running then:  </p>\n\n<ul>\n<li>start the process by switching the timer in the model_view (starts the timer)</li>\n<li>disable several features in the gui for the time the simulation is running</li>\n</ul>\n\n<p>In addition adjust the model (delete old no more relevant actions for the robots \nand set the new max number of steps equal to the current step).</p>\n\n<p>At the end update the widget.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.on_update", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.on_update", "kind": "function", "doc": "<p>The function is called when the button \">\" is pressed. <br />\nStops the timer and performs one step for every item in the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.on_undo", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.on_undo", "kind": "function", "doc": "<p>The function is called when the button \"&lt;\" is pressed. <br />\nStops the timer and performs one step back for every item in the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.on_restart", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.on_restart", "kind": "function", "doc": "<p>The function is called when the button \"|&lt;\" is pressed. <br />\nStops the timer and sets every item in the model to its initial state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.on_skip_to_end", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.on_skip_to_end", "kind": "function", "doc": "<p>The function is called when the button \">|\" is pressed. <br />\nStops the timer and performs a step forward for every item in the model\ntill the last step is reached.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.on_speed_up", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.on_speed_up", "kind": "function", "doc": "<p>The function is called when the button \"UP\" is pressed. <br />\nIncrease the speed of the simulation by reducing the timer in the model view</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.SimulationWidget.on_speed_down", "modulename": "mapf_simulation.gui", "qualname": "SimulationWidget.on_speed_down", "kind": "function", "doc": "<p>The function is called when the button \"DOWN\" is pressed. <br />\nDecreases the speed of the simulation by increasing the timer in the model view</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.ZoomWidget", "modulename": "mapf_simulation.gui", "qualname": "ZoomWidget", "kind": "class", "doc": "<p>This widget offers following elements:</p>\n\n<ul>\n<li>buttons \"Zoom +\" and \"Zoom -\" for zooming in and out the modelview (visualization of the simulation)  </li>\n<li>checkbox \"DRIVEN PATH\" for showing the driven path by the robots </li>\n<li>checkbox \"FUTURE PATH\" for showing the calculated path for the robots</li>\n<li>checkbox \"Drag&amp;Drop\" to enable/disable the moving of visual elements in the simulation by the user</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "mapf_simulation.gui.ZoomWidget.set_model_view", "modulename": "mapf_simulation.gui", "qualname": "ZoomWidget.set_model_view", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.ZoomWidget.on_zoom", "modulename": "mapf_simulation.gui", "qualname": "ZoomWidget.on_zoom", "kind": "function", "doc": "<p>The function is called when the button \"Zoom +\" or \"Zoom -\" is pressed. <br />\nChanges the view of the modelview(QGraphicsView) according to the zoom value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>zoom</strong>:  float - scaling factor for modelview (QGraphicsView)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">zoom</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.ZoomWidget.checkbox_draw_path", "modulename": "mapf_simulation.gui", "qualname": "ZoomWidget.checkbox_draw_path", "kind": "function", "doc": "<p>The function is called when the checkbox \"DRIVEN PATH\" is enabled/disabled.\n(enables/disables the painting of the driven path for all the robots in the model)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.ZoomWidget.checkbox_draw_future_path", "modulename": "mapf_simulation.gui", "qualname": "ZoomWidget.checkbox_draw_future_path", "kind": "function", "doc": "<p>The function is called when the checkbox \"FUTURE PATH\" is enabled/disabled.\n(enables/disables the painting of the calculated path for all the robots in the model)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.ZoomWidget.checkbox_enable_drag", "modulename": "mapf_simulation.gui", "qualname": "ZoomWidget.checkbox_enable_drag", "kind": "function", "doc": "<p>The function is called when the checkbox \"DRAG&amp;DROP\" is enabled/disabled <br />\n(enables/disables drag&amp;drop for all the elements in the model)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.OthersWidget", "modulename": "mapf_simulation.gui", "qualname": "OthersWidget", "kind": "class", "doc": "<p>This widget offers three buttons:</p>\n\n<ul>\n<li>RESET: reset the simulation to the beginning</li>\n<li>CLEAR: delete data loaded from the .map and .scen files</li>\n<li>HELP:  create a help window for assistance purposes for the user</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "mapf_simulation.gui.OthersWidget.set_model_view", "modulename": "mapf_simulation.gui", "qualname": "OthersWidget.set_model_view", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.OthersWidget.reset", "modulename": "mapf_simulation.gui", "qualname": "OthersWidget.reset", "kind": "function", "doc": "<p>This function resets the simulation to the initial state.\nThe function is called when the button \"RESET\" is pressed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.OthersWidget.clear", "modulename": "mapf_simulation.gui", "qualname": "OthersWidget.clear", "kind": "function", "doc": "<p>This function deletes the data loaded from the .map und .scen files and resets everything else.\nThe function is called when the button \"CLEAR\" is pressed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.gui.OthersWidget.help", "modulename": "mapf_simulation.gui", "qualname": "OthersWidget.help", "kind": "function", "doc": "<p>This function creates a help window for the user for assistance purposes.\nThe function is called when the button \"HELP\" is pressed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model", "modulename": "mapf_simulation.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.model.Model", "modulename": "mapf_simulation.model", "qualname": "Model", "kind": "class", "doc": "<p>This class stores the information about the elements in the simulation: robots, tasks and checkpoints. <br />\nIt is also responsible for the communication between the CONTROLLER and the simulation through the ROS2-interfaces. <br />\nThe visualization of the simulation is done by <em>modelView</em>. <br />\nThe computation of the simulation is done by <em>Model</em>.</p>\n", "bases": "rclpy.node.Node"}, {"fullname": "mapf_simulation.model.Model.publisher", "modulename": "mapf_simulation.model", "qualname": "Model.publisher", "kind": "variable", "doc": "<p><strong>rclpy.publisher.Publisher</strong> - ros2 publisher to the topic <em>/mapf_map_info</em></p>\n"}, {"fullname": "mapf_simulation.model.Model.msg_id", "modulename": "mapf_simulation.model", "qualname": "Model.msg_id", "kind": "variable", "doc": "<p>This id describes the number of the current cycle in the simulation. <br />\nBy the start of every new cycle the id will be incremented. <br />\nA new cycle begins by publishing a message to the topic <em>/mapf_map_info</em> [mapf_interfaces/MapInfo]\nA cycle is finished when an action has been executed for every item in the model for the current step. <br />\n(sim->controller->planner->controller->sim)</p>\n"}, {"fullname": "mapf_simulation.model.Model.clear", "modulename": "mapf_simulation.model", "qualname": "Model.clear", "kind": "function", "doc": "<p>This function clears the model. All stored data will be deleted. This function is used only when a new map is loaded!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.clear_scene", "modulename": "mapf_simulation.model", "qualname": "Model.clear_scene", "kind": "function", "doc": "<p>This function clears the scene of the model. \nThis function is used only when a new scene file is loaded into the model! \nFollowing actions will be performed:</p>\n\n<ul>\n<li>all registered ROS2-nodes for robots destroyed</li>\n<li>all items of the following kinds removed: RobotROS, CheckpointROS and TaskROS</li>\n<li>all previously saved data from the .SCEN file also deleted</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.clear_actions", "modulename": "mapf_simulation.model", "qualname": "Model.clear_actions", "kind": "function", "doc": "<p>This function deletes all actions for all objects (robots, tasks, checkpoints) in the simulation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.clear_older_actions", "modulename": "mapf_simulation.model", "qualname": "Model.clear_older_actions", "kind": "function", "doc": "<p>This function deletes those actions for all objects (robots, tasks, checkpoints) in the simulation \nwhich are no longer relevant.   </p>\n\n<p>This is usually the case when the user pauses the simulation, navigates a few steps back \nand then starts the simulation again. Then all actions for steps higher than the current step\nare no longer relevant and should be deleted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.reset", "modulename": "mapf_simulation.model", "qualname": "Model.reset", "kind": "function", "doc": "<p>This function deletes all actions for all objects (robots, tasks, checkpoints) in the simulation and \nresets the number of steps to zero (meaning no steps have been executed in the simulation so far).</p>\n\n<p>This function is used for Drag&amp;Drop. \nAfter moving an object in the window the number of steps should be set to zero \nand all prevous actions discarded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.update_windows", "modulename": "mapf_simulation.model", "qualname": "Model.update_windows", "kind": "function", "doc": "<p>This function performs an update of all windows saved in a speficic list in the model. \nThis is used to update the data in all windows after some information in the model has changed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.add_window", "modulename": "mapf_simulation.model", "qualname": "Model.add_window", "kind": "function", "doc": "<p>This function adds a widget to the list of windows. Then every window from this list can be updated at the same time. \nThe update will be executed by the function <em>update_windows()</em> when some information in the model has changed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>window</strong>:    QtWidgets.QWidget -   window which should be updated when some data in the model has changed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.remove_window", "modulename": "mapf_simulation.model", "qualname": "Model.remove_window", "kind": "function", "doc": "<p>This function removes a specific widget from the list of windows which have to be updated every time the model has changed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>window</strong>:    QtWidgets.QWidget -   window which should be removed from the list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.update", "modulename": "mapf_simulation.model", "qualname": "Model.update", "kind": "function", "doc": "<p>This function performs a step forward for every item in the model</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>update_windows</strong>:    bool, optional -  defines if the windows / visualization should be updated after changing the data in the model</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>int</strong> -  the current step which is increased by 1 after every update (step forward)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">update_windows</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.undo", "modulename": "mapf_simulation.model", "qualname": "Model.undo", "kind": "function", "doc": "<p>This function performs a step backwards for every item in the model and then updates the windows. <br />\nThis function is used after clicking the BUTTON \"&lt;\" in the gui</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>int</strong> -  the current step which is decreased by 1 after every step backwards</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.redo", "modulename": "mapf_simulation.model", "qualname": "Model.redo", "kind": "function", "doc": "<p>This function performs a step forward for every item in the model and then updates the windows. <br />\nThis function is used after clicking the BUTTON \">\" in the gui</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>int</strong> -  the current step which is increased by 1 after every step forward</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.restart", "modulename": "mapf_simulation.model", "qualname": "Model.restart", "kind": "function", "doc": "<p>This function performs a step backwards for every item in the model until it reaches the step 0\nand then updates the windows. <br />\nThis function is used after clicking the BUTTON \"|&lt;\" in the gui</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.skip_to_end", "modulename": "mapf_simulation.model", "qualname": "Model.skip_to_end", "kind": "function", "doc": "<p>This function performs a step forward for every item in the model until it reaches the last simulated step. \nand then updates the windows. <br />\nThis function is used after clicking the BUTTON \">|\" in the gui</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.add_node", "modulename": "mapf_simulation.model", "qualname": "Model.add_node", "kind": "function", "doc": "<p>This function adds a node to the map. Every node is described by x and y coordinates. \nEvery robot or checkpoint can be placed at a specific node. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:        int             - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int             - The y coordinate on the grid</li>\n<li><strong>node_id</strong>:  int, optional   - A specific ID for the node (the id is not used at the moment)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">node_id</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.remove_node", "modulename": "mapf_simulation.model", "qualname": "Model.remove_node", "kind": "function", "doc": "<p>This function removes a node from the map and so blocks the grid cell. \nThe grid cell can no longer be occupied by a robot or checkpoint.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:        int             - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int             - The y coordinate on the grid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.set_grid_size", "modulename": "mapf_simulation.model", "qualname": "Model.set_grid_size", "kind": "function", "doc": "<p>This function creates a map with size X and Y. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:             int            - The horizontal size of the map</li>\n<li><strong>Y</strong>:             int            - The vertical size of the map</li>\n<li><strong>enable_nodes</strong>:  bool, optional - Defines whether for every grid cells a node should be created \nor the grid cells should be all blocked</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">enable_nodes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.is_node", "modulename": "mapf_simulation.model", "qualname": "Model.is_node", "kind": "function", "doc": "<p>Returns whether the cell x,y is a node (free) or is blocked</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:        int - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int - The y coordinate on the grid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>   -  if the cell is a free node\n           <strong>False</strong>  -  if the cell is a blocked node</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.is_node_free_of_robots", "modulename": "mapf_simulation.model", "qualname": "Model.is_node_free_of_robots", "kind": "function", "doc": "<p>Returns whether the node x,y is free of robots</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:        int - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int - The y coordinate on the grid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>False</strong>  -  if there is a robot at the node x,y <br />\n           <strong>True</strong>   -  otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.create_item", "modulename": "mapf_simulation.model", "qualname": "Model.create_item", "kind": "function", "doc": "<p>This function creates an item and saves it in the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item_kind</strong>:        str             - The name if the item (\"robot_ros\", \"checkpoint_ros\", \"task_ros\")</li>\n<li><strong>ID</strong>:               int             - The ID for the item (usually the ID will be incremented for every new item of the same kind)</li>\n<li><strong>add_immediately</strong>:  bool, optional  - Not used (always True)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item_kind</span>, </span><span class=\"param\"><span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">add_immediately</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.add_item", "modulename": "mapf_simulation.model", "qualname": "Model.add_item", "kind": "function", "doc": "<p>Saves the given item in the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item</strong>:  mapf_simulation.visualizerItem.VisualizerItem  - The item which should be saved in the model</li>\n<li><strong>add_immediately</strong>:  bool, optional  - Not used (always True)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">add_immediately</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.remove_item", "modulename": "mapf_simulation.model", "qualname": "Model.remove_item", "kind": "function", "doc": "<p>This function removes an item from the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item</strong>:  mapf_simulation.visualizerItem.VisualizerItem  - The item which should be removed from the model</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.filter_items", "modulename": "mapf_simulation.model", "qualname": "Model.filter_items", "kind": "function", "doc": "<p>This function searches the model for specific items and returns a list of items which match the criteria.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item_kind</strong>:            str                 - The name of the item (\"robot_ros\", \"checkpoint_ros\", \"task_ros\")</li>\n<li><strong>ID</strong>:                   int                 - The ID of the item </li>\n<li><strong>position</strong>:             (int, int, float)   - The position of the item (x,y,theta)</li>\n<li><strong>return_first</strong>:         bool, optional      - if True then returns the first item that matches the given criteria</li>\n<li><strong>return_non_buffered</strong>:  bool, optional      - Not used (always True).</li>\n<li><strong>return_buffered</strong>:      bool, optional      - Not used (always False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>one or a list of <strong>mapf_simulation.visualizerItem.VisualizerItem</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item_kind</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_first</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_non_buffered</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">return_buffered</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.contains", "modulename": "mapf_simulation.model", "qualname": "Model.contains", "kind": "function", "doc": "<p>This function checks whether the model contains a specific item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item</strong>:  mapf_simulation.visualizerItem.VisualizerItem  -   The item to search for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>   -  if the model contains the specific item <br />\n           <strong>False</strong>  -  otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.set_editable", "modulename": "mapf_simulation.model", "qualname": "Model.set_editable", "kind": "function", "doc": "<p>This function enables/disables the modification of the data (robots, checkouts) in the gui. \nThe data can be modified in the gui by drag&amp;drop or rightclick->enable/disable node</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>editable</strong>:  bool  -   True (enable) or False(disable)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">editable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.set_num_steps", "modulename": "mapf_simulation.model", "qualname": "Model.set_num_steps", "kind": "function", "doc": "<p>This function sets the number of executed steps in the simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_steps</strong>:  int  -   The number of executed steps in the simulation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_steps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.set_init_step", "modulename": "mapf_simulation.model", "qualname": "Model.set_init_step", "kind": "function", "doc": "<p>This function defines whether the current cycle is the first cycle(here also called as \"init step\").   </p>\n\n<p>In the first cycle the SIMULATION has to build up the connection (ROS2) between the different robots and the CONTROLLER \nwhich takes time. For that matterthe SIMULATION waits a little bit longer in the first cycle till the connection\nfor all robots is established. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boolean</strong>:  bool  -   True (INIT STEP) or False (NO INIT STEP)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_item", "modulename": "mapf_simulation.model", "qualname": "Model.get_item", "kind": "function", "doc": "<p>This function searches the model for a specific item and returns it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item_kind</strong>:            str                 - The name of the item (\"robot_ros\", \"checkpoint_ros\", \"task_ros\")</li>\n<li><strong>ID</strong>:                   int                 - The ID of the item </li>\n<li><strong>create</strong>:               bool, optional      - If True and the specific item doesn't exist then it will be created</li>\n<li><strong>add_immediately</strong>:      bool, optional      - If False then the item will be added to a separate list </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>mapf_simulation.visualizerItem.VisualizerItem</strong>  -   The item that matches the search criteria</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item_kind</span>, </span><span class=\"param\"><span class=\"n\">ID</span>, </span><span class=\"param\"><span class=\"n\">create</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">add_immediately</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_nodes", "modulename": "mapf_simulation.model", "qualname": "Model.get_nodes", "kind": "function", "doc": "<p>Returns the nodes of the map which can be occupied by different items (robots, checkpoints..).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of (int, int) -   List of pairs (x,y)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_node_id", "modulename": "mapf_simulation.model", "qualname": "Model.get_node_id", "kind": "function", "doc": "<p>Returns the id of a specific node.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong>:  pair of (int,int)  -   a node is defined by a pair of (x,y)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -   The id of the node</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_blocked_nodes", "modulename": "mapf_simulation.model", "qualname": "Model.get_blocked_nodes", "kind": "function", "doc": "<p>Returns the blocked nodes of the map which can not be occupied by different items (robots, checkpoints..).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of (int, int) -   List of pairs (x,y)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_grid_size", "modulename": "mapf_simulation.model", "qualname": "Model.get_grid_size", "kind": "function", "doc": "<p>Returns the size of the map.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(int, int) -   Size of the map (x, y)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_max_number_robots", "modulename": "mapf_simulation.model", "qualname": "Model.get_max_number_robots", "kind": "function", "doc": "<p>Returns the max number of robots in the map. \nThis number represents the number of robots which have been loaded from the .SCEN file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -   Max number of robots</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_editable", "modulename": "mapf_simulation.model", "qualname": "Model.get_editable", "kind": "function", "doc": "<p>Returns whether the data of the model (robots, checkouts) can be changed in the gui. \nThe data can be modified in the gui by drag&amp;drop or by right click->enable/disable node</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>   -  Data can be changed in the gui <br />\n           <strong>False</strong>  -  Data can not be changed in the gui</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_current_step", "modulename": "mapf_simulation.model", "qualname": "Model.get_current_step", "kind": "function", "doc": "<p>Returns the current step in the simulation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -   The current step in the simulation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.get_num_steps", "modulename": "mapf_simulation.model", "qualname": "Model.get_num_steps", "kind": "function", "doc": "<p>Returns the number of executed steps in the simulation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -   The number of executed steps in the simulation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.iterate_graphic_dictionaries", "modulename": "mapf_simulation.model", "qualname": "Model.iterate_graphic_dictionaries", "kind": "function", "doc": "<p>This function can be used for iterating through the graphic dictionaries in the model.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\"robot_ros\", \"checkpoint_ros\" and \"task_ros\"</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.iterate_graphic_items", "modulename": "mapf_simulation.model", "qualname": "Model.iterate_graphic_items", "kind": "function", "doc": "<p>This function can be used for iterating through the elements of every graphic dictionary in the model.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>every robot, every checkpoint and every task</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_update_map", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_update_map", "kind": "function", "doc": "<p>This function loads a map in the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:     string          - the complete path to the file including the name of the file</li>\n<li><strong>size_x</strong>:       int             - the horizontal size of the map</li>\n<li><strong>size_y</strong>:       int             - the vertical size of the map</li>\n<li><strong>map_data</strong>:     list of str     - the relevant data from the file, every string represents a line from the file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>    -   If the update of the map was successful <br />\n           <strong>False</strong>   -   otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">size_x</span>, </span><span class=\"param\"><span class=\"n\">size_y</span>, </span><span class=\"param\"><span class=\"n\">map_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_update_scene", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_update_scene", "kind": "function", "doc": "<p>This function loads a scene in the model (robots, checkpoints, tasks ...).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:         string              - the complete path to the file including the name of the file</li>\n<li><strong>buckets</strong>:          list of int         - every entry represents the number of the bucket to which a robot belongs</li>\n<li><strong>start</strong>:            list of (int, int)  - list of pairs (x,y), every pair represents a start position for a robot</li>\n<li><strong>goals</strong>:            list of (int, int)  - list of pairs (x,y), every pair represents a goal position for a robot</li>\n<li><strong>heuristics</strong>:       list of floats      - every entry represents the optimal length for every robot from his start to his goal</li>\n<li><strong>input_buckets</strong>:    string              - the string represents the list of buckets to be loaded</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>    -   If the update of the scene was successful <br />\n           <strong>False</strong>   -   otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">buckets</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">goals</span>, </span><span class=\"param\"><span class=\"n\">heuristics</span>, </span><span class=\"param\"><span class=\"n\">input_buckets</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_add_robot", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_add_robot", "kind": "function", "doc": "<p>This function adds a robot to the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ID</strong>:           int         - The ID of the robot</li>\n<li><strong>start</strong>:        (int, int)  - The start position of the robot</li>\n<li><strong>goal</strong>:         (int, int)  - The target position of the robot</li>\n<li><strong>bucket</strong>:       int         - The number of the bucket to which the robot belongs</li>\n<li><strong>heuristics</strong>:   float       - The optimal length for the robot from his start position to his goal position</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>mapf_simulation.visualizerGraphicItem.RobotROS</strong>    -  The robot that has been created</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ID</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">goal</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">heuristic</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_update_number_robots", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_update_number_robots", "kind": "function", "doc": "<p>This function changes the number of the robots which should be simulated. <br />\nThis function is used when the user changes the number of robots through the gui.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number_input</strong>:     int - The number of the robots which should be simulated</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>    -   If the number of the robots in the simulation has been changed with success <br />\n           <strong>False</strong>   -   If the operarion failed for some reason</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number_input</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_check_number_robots", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_check_number_robots", "kind": "function", "doc": "<p>This function checks the input for the number of robots which should be simulated. <br />\nThe input is not valid if it exceeds the max number of robots which have been loaded into the model from the scene file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong>:     int   - The number of the robots which should be simulated</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>int</strong>        - The corrected number of the robots which should be simulated</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_create_bucket_list", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_create_bucket_list", "kind": "function", "doc": "<p>This function creates a list of buckets from the input from the gui. <br />\n(only the robots with a number of bucket from this list should be loaded into the model from the scene file)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:        str      - The input string for the buckets from the gui </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of <strong>str</strong>     - The list of buckets</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_robots_enable_draw_start", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_robots_enable_draw_start", "kind": "function", "doc": "<p>This function enables / disables the drawing of starting points for all robots in the simulation. <br />\nThis function is used when the user enables / disables the checkbox \"DRIVEN PATH\" in the gui.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>draw_path</strong>:  bool  -   True or False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">draw_start</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_robots_enable_draw_path", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_robots_enable_draw_path", "kind": "function", "doc": "<p>This function enables / disables the drawing of the travelled path for all robots in the simulation. <br />\nThis function is used when the user enables / disables the checkbox \"DRIVEN PATH\" in the gui.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>draw_path</strong>:  bool  -   True or False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">draw_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_robots_enable_draw_future_path", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_robots_enable_draw_future_path", "kind": "function", "doc": "<p>This function enables / disables the drawing of the computed path for all robots in the simulation. <br />\nThis function is used when the user enables / disables the checkbox \"FUTURE PATH\" in the gui.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>draw_path</strong>:  bool  -   True or False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">draw_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_reset_map_scene", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_reset_map_scene", "kind": "function", "doc": "<p>This function resets the simulation to it's initial state. <br />\nThis function is used after pressing the button \"RESET\" in the gui by the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_get_map_height", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_get_map_height", "kind": "function", "doc": "<p>Returns the height of the map.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -   The height of the map</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_get_map_width", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_get_map_width", "kind": "function", "doc": "<p>Returns the width of the map.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int -   The width of the map</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_get_filename_map", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_get_filename_map", "kind": "function", "doc": "<p>Returns the name of the .MAP file (including the complete path)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str -   The name  of the .MAP file (including the complete path)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_get_filename_scene", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_get_filename_scene", "kind": "function", "doc": "<p>Returns the name of the .SCEN file (including the complete path)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str -   The name of the .SCEN file (including the complete path)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_get_bucket_list", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_get_bucket_list", "kind": "function", "doc": "<p>Returns the list of the loaded buckets from the .SCEN file. <br />\nThis function is used to adjust the title of the window <br />\n(Title of the window = \"name of the .MAP file\" + \"name of the .SCEN file\" + \"list of loaded buckets\")</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str -   The list of loaded buckets from the .SCEN file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_init_next_step", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_init_next_step", "kind": "function", "doc": "<p>This function starts a new cycle by initialising all the robots and \npublishing certain ROS2 messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_set_all_robots_ready", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_set_all_robots_ready", "kind": "function", "doc": "<p>This function sets the state of all the robots to \"READY\" (True) or \"NOT READY\" (False). <br />\nThis function is used to  initialize all the robots before a new cycle can be started. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ready</strong>:  bool, optional   -   Sets the state of all the robots to \"READY\" (True) or \"NOT READY\" (False)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ready</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_ros_publish_msg", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_ros_publish_msg", "kind": "function", "doc": "<p>This function creates and publishes a ROS2 message to the topic \n<em>/mapf_map_info</em> [mapf_interfaces/MapInfo]. <br />\nThen it publishes a ROS2 message for every robot to the topic \n<em>/mapf_robot_info_\"ID\"</em> [mapf_interfaces/RobotInfo].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_ros_publish_map_info", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_ros_publish_map_info", "kind": "function", "doc": "<p>This function creates and publishes a ROS2 message to the topic \n<em>/mapf_map_info</em> [mapf_interfaces/MapInfo].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>step</strong>:  int   -   Sets the time step in the published messages (msg.step = time_step)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_spin_once", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_spin_once", "kind": "function", "doc": "<p>This function spins every ROS2-node in the simulation once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout_end</strong>:  float   -   The next timeout in seconds </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(bool, bool)       -   First bool indicates if the simulation is ready to execute the next action for every robot.\n                                  Second bool describes if the time has passed the given timeout.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout_end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_check_sim_ready", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_check_sim_ready", "kind": "function", "doc": "<p>This function checks whether the simulation is ready to execute the next action for every robot.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>   -   The simulation is ready to execute the next action for every robot. <br />\n           <strong>False</strong>   -   The simulation is not ready yet to execute the next action for every robot.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.model.Model.mapf_reset_connection", "modulename": "mapf_simulation.model", "qualname": "Model.mapf_reset_connection", "kind": "function", "doc": "<p>This function resets the connection between the SIMULATION and the CONTROLLER.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView", "modulename": "mapf_simulation.modelView", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.modelView.PUBLISH", "modulename": "mapf_simulation.modelView", "qualname": "PUBLISH", "kind": "variable", "doc": "<p>= state of the simulation at the begin of every cycle. Here the simulation publishes all information \n(1xmapf_interfaces/MapInfo.msg and for every robot 1xmapf_interfaces/RobotInfo.msg).</p>\n", "default_value": "0"}, {"fullname": "mapf_simulation.modelView.WAIT", "modulename": "mapf_simulation.modelView", "qualname": "WAIT", "kind": "variable", "doc": "<p>= state of the simulation after it has published all information and is waiting until \nit has received all information from the CONTROLLER <br />\n(for every robot 1xmapf_interfaces/RobotAction.msg).</p>\n", "default_value": "1"}, {"fullname": "mapf_simulation.modelView.EXEC", "modulename": "mapf_simulation.modelView", "qualname": "EXEC", "kind": "variable", "doc": "<p>= state of the simulation after it has received all information from the CONTROLLER. \nHere the simulation executes the given actions for every robot.</p>\n", "default_value": "2"}, {"fullname": "mapf_simulation.modelView.MainScene", "modulename": "mapf_simulation.modelView", "qualname": "MainScene", "kind": "class", "doc": "<p>QGraphicsScene(parent: QObject = None)\nQGraphicsScene(QRectF, parent: QObject = None)\nQGraphicsScene(float, float, float, float, parent: QObject = None)</p>\n", "bases": "PyQt5.QtWidgets.QGraphicsScene"}, {"fullname": "mapf_simulation.modelView.ModelView", "modulename": "mapf_simulation.modelView", "qualname": "ModelView", "kind": "class", "doc": "<p>This class is responsible for the visualization the simulation.</p>\n\n<p>To update the simulation a timer is created. \nAfter the time is up the window is updated with the new positions of the items(robots) in the map. \nItems are moved to their new position step by step. <br />\nFor a complete execution of the action for a robot per default 10 timers are created. So every\ntime the timer is up the robots are moved incrementally (around 10%). <br />\nAfter the running out of the 10 timers the robots have reached their new final position. Then the model \nis updated with the new positions of the robots.</p>\n", "bases": "PyQt5.QtWidgets.QGraphicsView"}, {"fullname": "mapf_simulation.modelView.ModelView.set_model", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.set_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.get_model", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.get_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.wheelEvent", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.wheelEvent", "kind": "function", "doc": "<p>wheelEvent(self, QWheelEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.zoom_event", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.zoom_event", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.resizeEvent", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.resizeEvent", "kind": "function", "doc": "<p>resizeEvent(self, QResizeEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.resize_to_fit", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.resize_to_fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.mousePressEvent", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.mousePressEvent", "kind": "function", "doc": "<p>mousePressEvent(self, QMouseEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.event", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.event", "kind": "function", "doc": "<p>event(self, QEvent) -> bool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.contextMenuEvent", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.contextMenuEvent", "kind": "function", "doc": "<p>This function creates the contextmenu by right click in the simulation window.\nFor the moment only two options defined: \"enable node\" and \"disable node\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.start_timer", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.start_timer", "kind": "function", "doc": "<p>This function stops the previous timer and starts a new one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.adjust_timer", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.adjust_timer", "kind": "function", "doc": "<p>This function sets the timeout for the timer.   </p>\n\n<p>Timeout = time to execute the complete step / number of intermediate steps  </p>\n\n<p>Example: the duration of one complete step schould be 1 sec. with 10 intermediate steps. \nThen every timer should run for = 1sec/10 = 0.1seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.switch_timer", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.switch_timer", "kind": "function", "doc": "<p>This function switches the timer <br />\n(start the timer if there is no timer running / stop the timer if there is a timer running).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.stop_timer", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.stop_timer", "kind": "function", "doc": "<p>This function stops the timer if there is a timer running.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.speed_up_timer", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.speed_up_timer", "kind": "function", "doc": "<p>This function decreases the time for completion of one complete step.</p>\n\n<p>Following values are allowed (in milliseconds): <br />\n2000 (intermediate steps=20), 1000 (10), 500 (10), 250(5), 0(0)</p>\n\n<p>By decreasing the time the value is moved from left to right <br />\n(example: old value 500, new value 250)</p>\n\n<p>The timeout for one timer is defined by \"time for completion of one step\" / \"intermediate steps\"\n(example: value 2000, then 20 intermediate steps with every timer running for 100 millisec.)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.speed_down_timer", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.speed_down_timer", "kind": "function", "doc": "<p>This function increaes the time for completion of one complete step.</p>\n\n<p>Following values are allowed (in milliseconds): <br />\n2000 (intermediate steps=20), 1000 (10), 500 (10), 250(5), 0(0)</p>\n\n<p>By increasing the time the value is moved from right to left <br />\n(example: old value 250, new value 500)</p>\n\n<p>The timeout for one timer is defined by \"time for completion of one step\" / \"intermediate steps\"\n(example: value 250, then 5 intermediate steps with every timer running for 50 millisec.)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.is_timer_running", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.is_timer_running", "kind": "function", "doc": "<p>This function checks whether the timer is running.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>, if a timer is running <br />\n  <strong>False</strong>, otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.update_windows", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.update_windows", "kind": "function", "doc": "<p>This function updates all registered windows.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.add_window", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.add_window", "kind": "function", "doc": "<p>This function adds a widget to the list of widgets which should be updated every time the function update_windows(self) is called.\nThis could be the robot table (RightSideWidget) or widgets from the left side.\nThis widgets can then be updated all together if the model view has changed. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>window</strong>:  PyQt5.QtWidgets.QWidget - widget which should be added to the list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.update", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.update", "kind": "function", "doc": "<p>This function draws the map, the items and other elements in the window. </p>\n\n<p>Following elements will be plotted:</p>\n\n<ul>\n<li>vertical and horizontal lines</li>\n<li>disabled nodes (=blocked spots)</li>\n<li>every graphic item in the model</li>\n</ul>\n\n<p>Following elements are optional and will be plotted only if activated by the user:</p>\n\n<ul>\n<li>start points of the items</li>\n<li>driven path by the items</li>\n<li>future/calculated path for the items</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.update_model", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.update_model", "kind": "function", "doc": "<p>This function will be called every time the timer is running out. \nThe function changes the state of this class depending on \nthe actual state of this class and the data received by the model through ROS2. \nDepending on the state of this class different actions will be performed by the model.</p>\n\n<p>Following states are accepted: </p>\n\n<ul>\n<li>PUBLISH: model sends information about the map (MapInfo.msg) and every robot (RobotInfo.msg) to the CONTROLLER</li>\n<li>WAIT:    no action until the model has received all information about the next actions from the CONTROLLER</li>\n<li>EXEC:    modelView executes all received actions from the CONTROLLER by the model for the next step incrementally.\nAfter completing the step by the modelview the model will be updated with new positions of the robots and \nthe simulation changes it's state to PUBLISH again!</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">forced</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.do_model", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.do_model", "kind": "function", "doc": "<p>This function performs a step forward when the button \">\" in the GUI was pressed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.undo_model", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.undo_model", "kind": "function", "doc": "<p>This function performs a step back when the button \"&lt;\" in the GUI was pressed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.clear", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.clear", "kind": "function", "doc": "<p>This function removes the items from the window which belong to the previous paint. \nEvery time the visualization is updated all old elements are removed from the window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.modelView.ModelView.get_next_ros_timeout", "modulename": "mapf_simulation.modelView", "qualname": "ModelView.get_next_ros_timeout", "kind": "function", "doc": "<p>This function returns the next timeout for ROS2 after which the simulation should move back to the mode PUBLISH.  </p>\n\n<p>This timeout is needed in the case the simulation has not received the needed information from the controller after \na specific time. In this case the complete cycle should be restarted. \nThis done by the simulation publishing the information about the map and the items once again.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.parser", "modulename": "mapf_simulation.parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mapf_simulation.parser.MAPFfileParser", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser", "kind": "class", "doc": "<p>This class represents the file parser for reading the .map and .scen files\nand loading the content of the files into the model!</p>\n"}, {"fullname": "mapf_simulation.parser.MAPFfileParser.set_model", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser.set_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.parser.MAPFfileParser.set_model_view", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser.set_model_view", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_view</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.parser.MAPFfileParser.load_map", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser.load_map", "kind": "function", "doc": "<p>This function is used for loading the .map file.  </p>\n\n<p>The function checks first whether the file exists and can be opened. \nThen it tries to read from the file. \nAfter reading the file the function analyzes the content and the syntax.\nIf the test is positive then it loads the data into the model!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  string - the complete path to the file including the name of the file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n<pre><code>1, if the file was loaded successfully\n        0, otherwise\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.parser.MAPFfileParser.load_scene", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser.load_scene", "kind": "function", "doc": "<p>This function is used for loading the .scen file.  </p>\n\n<p>The function checks first whether the file exists and can be opened. \nThen it tries to read from the file. \nAfter reading the file the function analyzes the content and the syntax.\nIf the test is positive then the function checks further if there are conflicts between the different \nitems in the map. In the case of no conflicts the parser loads the data into the model!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  string - the complete path to the file including the name of the file</li>\n<li><strong>input_buckets</strong>:  string - list of buckets to be loaded, for more details about the syntax\nread <em>gui.py</em> </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n<pre><code>1, if the file was loaded successfully\n        0, otherwise\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">input_buckets</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.parser.MAPFfileParser.analyze_file_map", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser.analyze_file_map", "kind": "function", "doc": "<p>The function checks the syntax of the .map file. For more details about the correct syntax of the .map file look here:\n<a href=\"https://movingai.com/benchmarks/formats.html\">https://movingai.com/benchmarks/formats.html</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lines</strong>:  list of strings - where every string represents a line from the .map file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>, if the content of the .map file is okay <br />\n  <strong>False</strong>, otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.parser.MAPFfileParser.analyze_file_scene", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser.analyze_file_scene", "kind": "function", "doc": "<p>The function checks the content of the .scen file. For more details about the correct syntax of the .scen file look here:\n<a href=\"https://movingai.com/benchmarks/formats.html\">https://movingai.com/benchmarks/formats.html</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lines</strong>:  list of strings - where every string represents a line from the .scen file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>, if the content of the .scen file is okay <br />\n  <strong>False</strong>, otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.parser.MAPFfileParser.check_collisions", "modulename": "mapf_simulation.parser", "qualname": "MAPFfileParser.check_collisions", "kind": "function", "doc": "<p>This function checks if there are conflicts between the different \nitems in the map. </p>\n\n<p>A conflict occurs in the following cases:</p>\n\n<ul>\n<li>two or more agents are trying to occupy the same spot</li>\n<li>two or more robots have the same target</li>\n<li>the start position of an agent collides with a blocked node in the map</li>\n<li>the target spot of an agent collides with a blocked node in the map</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>robot_nodes</strong>:  list of (x,y) - where every entry (x,y) represents the start position for one robot</li>\n<li><strong>goal_nodes</strong>:  list of (x,y) - where every entry (x,y) represents the end position for one robot</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>, if no conflict was found <br />\n  <strong>False</strong>, if a conflict was found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">robot_nodes</span>, </span><span class=\"param\"><span class=\"n\">goal_nodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem", "modulename": "mapf_simulation.visualizerGraphicItem", "kind": "module", "doc": "<p>To add a new kind of graphic items create a <strong>child class\nof VisualizerGraphicItem</strong> in this file and add it in the \n<strong>model.create_item</strong> function to the model. This is the only function \nin the model that should be changed. The behaivor and values of the\nobject should be defindes inside of its own class.</p>\n\n<p>To add new properties to a class modify the attributes of a class\nand modify the following methods to adjust the objects behaivor:\n <strong>reset</strong>, <strong>do_action</strong>, <strong>undo_action</strong>, <strong>ros_publish_message_info</strong>. \nTo adjust the appearance of an item modify the <strong>set_rect</strong> method.\nNote: The set_color function is called automatically by the modelView for\nevery item if the colors are defined in the configuration.</p>\n\n<p>Look at the method definitions of other classes for examples.</p>\n"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VIZ_STATE_MOVED", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VIZ_STATE_MOVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VIZ_STATE_MOVE", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VIZ_STATE_MOVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "16"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VIZ_STATE_ACTION", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VIZ_STATE_ACTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "65535"}, {"fullname": "mapf_simulation.visualizerGraphicItem.calculate_color", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "calculate_color", "kind": "function", "doc": "<p>This function interpolates between two color values.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>QtGui.QColor()</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">first_color</span>, </span><span class=\"param\"><span class=\"n\">second_color</span>, </span><span class=\"param\"><span class=\"n\">multiplier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem", "kind": "class", "doc": "<p>This is the template class for visualizer graphic items.\n    There should never be an instance of this class.\n    A visualizer graphic item is a part of the visualizer model\n    that is drawn on the model view and can perform actions.</p>\n\n<pre><code>**Attributes**:\n-   **_kind_name**: str         -   The name of this kind of object.\n-   **_ID**: int                -   The id of this object.\n-   **_model**: model.Model     -   The model this object belongs to\n-   **_position**: tuple        -   A tuple that consists of two integers representing\n                                    the position of the item on the grid.\n-   **_start_position**: tuple  -   The position of this item at timestep 0.\n-   **_dragged**: tuple         -   This is the position of this item before a drag\n                                    action started.\n-   **_enable_drag**: bool      -   This is true if drag and drop is enabled for this item.        \n                                    This will be set by the model. \n-   **_graphics_item**: QGraphicsItem - This is the main graphic item of this item\n                                        and is used for some default functions.\n-   **_text**: QGraphicsTextItem -  This is a text item that is drawn \n                                    on the model view and represents primarily the id of the item.\n-   **_actions**: list          -   This is a sorted list of the actions of this item. The index\n                                    of every action is the time step at which the action occurs.    \n-   **_color**: QColor          -   The current main color of the item.\n-   **_colors**: list           -   A list of QColor values. Contains several colors for multi-colored\n                                    items and color interpolation.\n-   **_display_mode**: int      -   This is set by the model view and determines whether\n                                    the item text should be rendered and whether the item \n                                    should be rendered in the whole grid field.\n                                    It is primarily defined by the zoom factor and the grid size.\n-   **_draw_path**: bool        -   This is true if the driven path of the item should be drawn in the simulation. \n                                    Should only be used for items that can have a path like robots.\n-   **_draw_future_path**: bool -   This is true if the calculated path for the item should be drawn in the simulation. \n                                    Should only be used for items that can have a path like robots.\n-   **_draw_startpoint**: bool  -   This is true if the start point of the item should be drawn in the simulation. \n                                    Should only be used for items that can have a start point like robots.\n-   **_state**: int             -   Consists of one or more state flags, that describes which action\n                                    a item is currently doing.\n-   **_highlighted**: bool      -   This is true if the item will be highlighted.\n                                    Highlighted elements are displayed larger\n</code></pre>\n\n<p>.</p>\n", "bases": "PyQt5.QtWidgets.QGraphicsItem, mapf_simulation.visualizerItem.VisualizerItem"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.__init__", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ID</strong>:  int, optional    - The ID of the item</li>\n<li><strong>x</strong>:   int, optional    - The x coordinate on the grid</li>\n<li><strong>y</strong>:   int, optional    - The y coordinate on the grid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_starting_position", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_starting_position", "kind": "function", "doc": "<p>Sets the starting position of an item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:   int      - The x coordinate on the grid</li>\n<li><strong>y</strong>:   int      - The y coordinate on the grid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_position", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_position", "kind": "function", "doc": "<p>Sets the current position of an item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:   int      - The x coordinate on the grid</li>\n<li><strong>y</strong>:   int      - The y coordinate on the grid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_color", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_color", "kind": "function", "doc": "<p>Sets a specific color of an item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>color</strong>:  QColor    - The color</li>\n<li><strong>color_id</strong>:   int   - The id of the color that will be set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">color_id</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_rect", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_rect", "kind": "function", "doc": "<p>Sets the rectangle that an item can use to draw things in.\nThis equals usually one field of the grid in the model view.\nThis function usually defines the appearance of an item\non the grid.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rect</strong>:  QtCore.QRect   - The rectangle that an item can use to draw things in.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rect</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_action", "kind": "function", "doc": "<p>Sets the action for the specific time step.\nOverrides existing actions at the time step but prints out\na warning since this should never happen.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>action</strong>:       mapf_simulation.action.Action   -   This is the action that will be performed.</li>\n<li><strong>time_step</strong>:    int                             -   This is the time step at which the action should be performed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_display_mode", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_display_mode", "kind": "function", "doc": "<p>Sets the current display mode.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>display_mode</strong>:  int   - display mode (usually 0 or 1)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_draw_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_draw_path", "kind": "function", "doc": "<p>Sets whether the driven path of the object should be drawn.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>draw_path</strong>:  bool  -   True or False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">draw_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_draw_future_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_draw_future_path", "kind": "function", "doc": "<p>Sets whether the calculated path for the object should be drawn.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>draw_path</strong>:  bool  -   True or False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">draw_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_draw_start", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_draw_start", "kind": "function", "doc": "<p>Sets whether the starting point of the object should be drawn. \nThis is usually the case if the driven path should be drawn.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>draw_start</strong>:  bool  -   True or False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">draw_start</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.set_highlighted", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.set_highlighted", "kind": "function", "doc": "<p>Sets whether this item should be highlighted.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>highlighted</strong>:  bool    -   True or False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n<pre><code>QtCore.QRect    -   The current rectangle of the object\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">highlighted</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_name", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_name", "kind": "function", "doc": "<p>Returns the name of the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str    -   The name of this kind of object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_position", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_position", "kind": "function", "doc": "<p>Return the position of an item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple  -   The position of this item</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_start_position", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_start_position", "kind": "function", "doc": "<p>Return the position of an item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple  -   The start position of this item</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_color", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_color", "kind": "function", "doc": "<p>Returns the current main color of an item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>QtGui.QColor   -   The current main color of this item</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_rect", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_rect", "kind": "function", "doc": "<p>Returns the current rectangle of an item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>QtCore.QRect   -   The current rectangle of this item</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_action", "kind": "function", "doc": "<p>Returns the action at a specific time step.\nReturns None if no action is defined for this time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int                      -   The time step for which the action should be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>mapf_simulation.action.Action</strong>   -   The action at a specific time step.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_future_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_future_path", "kind": "function", "doc": "<p>Returns the calculated path for the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of <strong>mapf_interfaces.msg.Position</strong>   -   The calculated path for this item.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_state", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_state", "kind": "function", "doc": "<p>Returns the current state of the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>0x00, VIZ_STATE_MOVED, VIZ_STATE_MOVE, VIZ_STATE_ACTION ...</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_draw_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_draw_path", "kind": "function", "doc": "<p>Returns whether the path of this item should be drawn.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_draw_future_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_draw_future_path", "kind": "function", "doc": "<p>Returns whether the future path of this item should be drawn.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_draw_startpoint", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_draw_startpoint", "kind": "function", "doc": "<p>Returns whether the starting point of this item should be drawn.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.get_highlighted", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.get_highlighted", "kind": "function", "doc": "<p>Returns whether the item should be highlighted.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.mousePressEvent", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.mousePressEvent", "kind": "function", "doc": "<p>This is a overridden QT function and used for drag and drop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.mouseReleaseEvent", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.mouseReleaseEvent", "kind": "function", "doc": "<p>This is a overridden QT function and used for drag and drop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.mouseMoveEvent", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.mouseMoveEvent", "kind": "function", "doc": "<p>This is a overridden QT function and used for drag and drop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.determine_color", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.determine_color", "kind": "function", "doc": "<p>Determines the color of an item dependent on its number.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong>:  int  -   The number of this item in the models sequence. \nThis does not necessarily have to be the ID of the item.</li>\n<li><strong>count</strong>:  int   -   The maximal count of all items in the model of this kind.</li>\n<li><strong>pattern</strong>:  int -   Not used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span>, </span><span class=\"param\"><span class=\"n\">count</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.paint", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.paint", "kind": "function", "doc": "<p>This is a overridden QT function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">painter</span>, </span><span class=\"param\"><span class=\"n\">option</span>, </span><span class=\"param\"><span class=\"n\">widget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.do_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.do_action", "kind": "function", "doc": "<p>Action handler. Must be implemented for items\nwhich can perform actions. This function will be called\nevery time the model does one time step forward.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int     -   The time step for which the action should be executed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.undo_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.undo_action", "kind": "function", "doc": "<p>Reverse action handler. Must be implemented for items\nwhich can perform actions. This function will be called \nevery time the model does one time step backwards.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int     -   The time step for which the action should be reversed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.clear_actions", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.clear_actions", "kind": "function", "doc": "<p>Deletes all actions for an object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.clear_older_actions", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.clear_older_actions", "kind": "function", "doc": "<p>Deletes all actions for the given time step (self._actions[time_step]) \nand after the given time step (self._actions[i>time_step]) for an object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int -   Sets the steps (time>=time_step) for which the actions should be deleted.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.restart", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.restart", "kind": "function", "doc": "<p>Resets the item to its original values.\nSets the items position to its starting position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.reset", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.reset", "kind": "function", "doc": "<p>Resets the item to its original values. This function will be called for every item if \nthe Button \"RESET\" in the GUI is pressed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.edit_position_to", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.edit_position_to", "kind": "function", "doc": "<p>Sets a new starting position and new current position for an \nitem. If an item of the same kind is already on the same position\nthey swap positions. This function is used to edit instances with\nthe drag and drop feature.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:   int      - The x coordinate on the grid</li>\n<li><strong>y</strong>:   int      - The y coordinate on the grid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.enable_drag", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.enable_drag", "kind": "function", "doc": "<p>Enables and disables the drag and drop feature for the\nmodel editor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>enable</strong>:  bool  -   enable or disable drag &amp; drop</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.boundingRect", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.boundingRect", "kind": "function", "doc": "<p>This is a overridden QT function and used for drag and drop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.VisualizerGraphicItem.ros_publish_message_info", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "VisualizerGraphicItem.ros_publish_message_info", "kind": "function", "doc": "<p>Must be implemented for items which should publish the information about itself through ROS2 interfaces.\nThis function will be called by the model every time an item does an action forward and has to publish\nthe updated information about itself.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg_id</strong>:       int  -   The id of the current cycle (sim->controller->planner->controller->sim)</li>\n<li><strong>time_step</strong>:    int  -   Sets the time step in the published message (msg.step = time_step)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_id</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS", "kind": "class", "doc": "<p>This class represents a robot.</p>\n\n<p><strong>Attributes</strong>:</p>\n\n<ul>\n<li><strong>_kind_name</strong>: str                     -   The name of this kind of item. This is always 'robot_ros'.</li>\n<li><strong>_tasks</strong>:    list                    -   The list of tasks of the robot.</li>\n<li><strong>_graphics_item</strong>: QGraphicsEllipseItem-   This is the main graphic item of the robot\nand is used for some default functions.</li>\n<li><strong>_text</strong>:          QGraphicsTextItem   -   This is a text item that is drawn on the model view\nand represents primarily the id of the robot.</li>\n</ul>\n", "bases": "rclpy.node.Node, VisualizerGraphicItem"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.__init__", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ID</strong>:       int, optional       - The ID of the robot</li>\n<li><strong>x</strong>:        int, optional       - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int, optional       - The y coordinate on the grid</li>\n<li><strong>theta</strong>:    float, optional     - The orientation of the robot in angle (\u00b0)</li>\n<li><strong>bucket</strong>:   int, optional       - The bucket to which the robot belongs</li>\n<li><strong>heuristic</strong>:  float, optional   - Optimal length from the start to the goal position</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">heuristic</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.publisher", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.publisher", "kind": "variable", "doc": "<p><strong>rclpy.publisher.Publisher</strong> - ros2 publisher to the topic <em>/mapf_robot_info_''ID''</em></p>\n"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.subscriber", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.subscriber", "kind": "variable", "doc": "<p><strong>rclpy.subscription.Subscription</strong> - ros2 subscriber to the topic <em>/mapf_robot_action_''ID''</em></p>\n"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_starting_position", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_starting_position", "kind": "function", "doc": "<p>Sets the starting position of the robot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:        int                 - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int                 - The y coordinate on the grid</li>\n<li><strong>theta</strong>:    float, optional     - The orientation of the robot in angle (\u00b0)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_position", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_position", "kind": "function", "doc": "<p>Sets the position of the robot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:        int                - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int                - The y coordinate on the grid</li>\n<li><strong>theta</strong>:    float, optional    - The orientation of the robot in angle (\u00b0)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_theta", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_theta", "kind": "function", "doc": "<p>Sets the orientation of the robot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>theta</strong>:    float, optional      - The orientation of the robot in angle (\u00b0).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_bucket", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_bucket", "kind": "function", "doc": "<p>Assign the robot to a certain bucket.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bucket</strong>:    int, optional      - The number of the bucket</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_ready", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_ready", "kind": "function", "doc": "<p>Sets the state of the robot (READY or NOT READY). <br />\n(A robot is READY if he knows what action he should execute as next) <br />\n(A robot is not READY if he still has not received an Action from the CONTROLLER for the next time step)  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ready</strong>:    bool, optional    - True or False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ready</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_heuristic", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_heuristic", "kind": "function", "doc": "<p>Assign the optimal length for the robot from his start to his goal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>heuristic</strong>:    float, optional - The optimal length for the robot from his start to his goal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">heuristic</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_future_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_future_path", "kind": "function", "doc": "<p>Assign/Save the calculated path for the robot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:    list of <strong>mapf_interfaces.msg.Position</strong> -    The calculated path for the robot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_action", "kind": "function", "doc": "<p>Sets the action for the specific time step.\nOverrides existing actions at the time step but prints out\na warning since this should never happen.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>action</strong>:       mapf_simulation.action.Action   -   This is the action that will be performed.</li>\n<li><strong>time_step</strong>:    int                             -   This is the time step at which the action should be performed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_bucket", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_bucket", "kind": "function", "doc": "<p>Returns the number of the bucket to which the robot was assigned.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>int</strong>   -   The number of the bucket</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_heuristic", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_heuristic", "kind": "function", "doc": "<p>Returns the saved heuristic for the robot.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>float</strong>   -   The heuristic</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_theta", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_theta", "kind": "function", "doc": "<p>Returns the orientation of the robot.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>float</strong>   -   The orientation of the robot</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_draw_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_draw_path", "kind": "function", "doc": "<p>Returns whether the driven path of this robot should be drawn.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_draw_future_path", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_draw_future_path", "kind": "function", "doc": "<p>Returns whether the future path of this robot should be drawn.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_draw_startpoint", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_draw_startpoint", "kind": "function", "doc": "<p>Returns whether the starting point of this robot should be drawn.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_tasks", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_tasks", "kind": "function", "doc": "<p>Returns the list of tasks for this robot (for the moment only one task per robot is supported).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of mapf_simulation.visualizerItem.TaskROS   -   The list of tasks</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_task", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_task", "kind": "function", "doc": "<p>Returns the task from the task list with a specific index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong>:  int                                   - The index of the task</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>mapf_simulation.visualizerItem.TaskROS</strong> - The selected task from the task list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.get_rect", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.get_rect", "kind": "function", "doc": "<p>Returns the current rectangle of the robot. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>QtCore.QRect</strong> - The adjusted current rectangle of the QGraphicsItem which should represent the robot.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.is_ready", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.is_ready", "kind": "function", "doc": "<p>Returns whether the robot is ready to execute the next action. <br />\n(A robot is READY if he knows what action he should execute as next) <br />\n(A robot is not READY if he still has not received an Action from the CONTROLLER for the next time step) </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>bool</strong>   -   True or False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.mouseReleaseEvent", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.mouseReleaseEvent", "kind": "function", "doc": "<p>This is a overridden QT function and used for drag and drop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.edit_position_to", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.edit_position_to", "kind": "function", "doc": "<p>Sets a new starting position and new current position for the \nrobot. If another robot is already on the same position\nthey swap positions. This function is used to edit instances with\nthe drag and drop feature. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:        int                - The x coordinate on the grid (new position for the robot)</li>\n<li><strong>y</strong>:        int                - The y coordinate on the grid (new position for the robot)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.set_rect", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.set_rect", "kind": "function", "doc": "<p>Sets the rectangle that a robot can use to draw things in.\nThis equals one field of the grid in the model view.\nThis function defines the appearance of the robot\non the grid.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rect</strong>:     QtCore.QRect    - The rectangle that a robot can use to draw things in.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rect</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.update_tooltip", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.update_tooltip", "kind": "function", "doc": "<p>Updates the tooltip for the robot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.determine_color", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.determine_color", "kind": "function", "doc": "<p>Determines the color of the robot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong>:  int  -   The number of this item in the models sequence. \nThis does not necessarily have to be the ID of the item.</li>\n<li><strong>count</strong>:  int   -   The maximal count of all items in the model of this kind.</li>\n<li><strong>pattern</strong>:  int -   Not used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span>, </span><span class=\"param\"><span class=\"n\">count</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.clear_actions", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.clear_actions", "kind": "function", "doc": "<p>Deletes all saved actions for the robot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.do_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.do_action", "kind": "function", "doc": "<p>Executes an action for the robot.\nThis function will be called every time the model does\none time step forward.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int     - The time step for which an action should be executed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>int</strong>          - 1 if an action was done and 0 if an error occured.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.undo_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.undo_action", "kind": "function", "doc": "<p>Reverse an executed action for the robot.\nThis function will be called every time the model does\none time step backwards.  </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int     - The time step for which an action should be reversed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>int</strong>          - 1 if an action was done and 0 if an error occured.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.reset", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.reset", "kind": "function", "doc": "<p>Resets the item to its original values. This function will be called for every item if \nthe Button \"RESET\" in the GUI is pressed</p>\n\n<ul>\n<li>delete old actions for the robot</li>\n<li>move the robot back to it's start position</li>\n<li>mark all the checkpoints of the robot as not visited yet</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.restart", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.restart", "kind": "function", "doc": "<p>Sets the robot to it's starting position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.add_task", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.add_task", "kind": "function", "doc": "<p>Adds a task to the robot (For the moment only one task is supported).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>task</strong>:    mapf_simulation.visualizerItem.TaskROS  -    A new task for the robot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.check_robot_at_target", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.check_robot_at_target", "kind": "function", "doc": "<p>This function checks whether the robot has reached it's target. \nAt the moment for one robot only one checkpoint and only one task are supported.\nTherefore this function checks only if the robot has reached the position \nof the first checkpoint from it's first task from his task list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><strong>True</strong>   -   if the robot has reached it's target <br />\n           <strong>False</strong>  -   otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.unvisit_all_checkpoints", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.unvisit_all_checkpoints", "kind": "function", "doc": "<p>This function iterates over the tasks of this robot and \nmarks all the checkpoints assigned to the tasks as not visited.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.ros_spin_once", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.ros_spin_once", "kind": "function", "doc": "<p>Spin the ROS2-node once (every robot is also a ROS2-node) to process the data sent through ROS2-interfaces</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.ros_publish_message_info", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.ros_publish_message_info", "kind": "function", "doc": "<p>This function generates a ROS2 message of type [mapf_interfaces/RobotInfo.msg] \nand publishes it to the following topic: <em>/mapf_robot_info_\"ID\"</em></p>\n\n<p>This function will be called by the model every time a robot performs an action and then has to publish\nthe updated information about itself.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg_id</strong>:       int  -   The id of the current cycle (sim->controller->planner->controller->sim)</li>\n<li><strong>time_step</strong>:    int  -   Sets the time step in the published message (msg.step = time_step)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_id</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.RobotROS.callback_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "RobotROS.callback_action", "kind": "function", "doc": "<p>This function will be called every time a message on the following topics is received: \n<em>/mapf_robot_info_\"ID\"</em></p>\n\n<p>This function creates an action from the received message and \nsaves the action in the robot for the (in the message) defined step!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  mapf_interfaces/RobotAction.msg - message from the topic /mapf_robot_action_ID</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS", "kind": "class", "doc": "<p>This class represents a Checkpoint.</p>\n\n<p><strong>Attributes</strong>:</p>\n\n<ul>\n<li><strong>_kind_name</strong>:     str                 -   The name of this kind of item. This is always 'checkpoint_ros'.</li>\n<li><strong>_graphics_item</strong>: QGraphicsRectItem   -   This is the main graphic item of the checkpoint\nand is used for some default functions.</li>\n<li><strong>_text</strong>:          QGraphicsTextItem   -   This is a text item that is drawn on the model view\nand represents primarily the id of the checkpoint.</li>\n<li><strong>_shine</strong>:         bool                -   This is true if the checkpoint should be highlighted. Checkpoints</li>\n</ul>\n", "bases": "VisualizerGraphicItem"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.__init__", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ID</strong>:       int, optional    - The ID of the item</li>\n<li><strong>x</strong>:        int, optional    - The x coordinate on the grid</li>\n<li><strong>y</strong>:        int, optional    - The y coordinate on the grid</li>\n<li><strong>theta</strong>:    int, optional    - Orientation of the item (not used currently)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.get_rect", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.get_rect", "kind": "function", "doc": "<p>Returns the current rectangle of an item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>QtCore.QRect   -   The current rectangle of this item</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.get_visit_status", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.get_visit_status", "kind": "function", "doc": "<p>Returns whether the item was visited by a roboter or not.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool   -   True or False</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.determine_color", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.determine_color", "kind": "function", "doc": "<p>Determines the color of the checkpoint.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong>:  int  -   The number of this item in the models sequence. \nThis does not necessarily have to be the ID of the item.</li>\n<li><strong>count</strong>:  int   -   The maximal count of all items in the model of this kind.</li>\n<li><strong>pattern</strong>:  int -   Not used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span>, </span><span class=\"param\"><span class=\"n\">count</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.set_rect", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.set_rect", "kind": "function", "doc": "<p>Sets the rectangle that a checkpoint can use to draw things in.\nThis equals one field of the grid in the model view.\nThis function defines the appearance of the checkpoint\non the grid.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rect</strong>:  QtCore.QRect   - The rectangle that a checkpoint can use to draw things in.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rect</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.do_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.do_action", "kind": "function", "doc": "<p>Resets the shine value at every time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int     -   Not used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.undo_action", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.undo_action", "kind": "function", "doc": "<p>Resets the shine value at every time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:    int     -   Not used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.visit", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.visit", "kind": "function", "doc": "<p>Sets the shine value to True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerGraphicItem.CheckpointROS.unvisit", "modulename": "mapf_simulation.visualizerGraphicItem", "qualname": "CheckpointROS.unvisit", "kind": "function", "doc": "<p>Sets the shine value to False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem", "modulename": "mapf_simulation.visualizerItem", "kind": "module", "doc": "<p>To add a new kind of visualizer item create a <strong>child class\nof VisualizerItem</strong> in this file and add it in the <strong>model.create_item</strong>\nfunction to the model. This is the only function in the model\nthat should be changed. The behaivor and values of the object\nshould be defined inside of its own class.</p>\n\n<p>To add new properties to a class modify the attributes of a class\nand modify the following methods to adjust the objects behaivor:\n<strong>restart</strong>, <strong>on_step_update</strong> and <strong>on_step_undo</strong>.</p>\n\n<p>Look at the method definitions of other classes for examples.</p>\n"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem", "kind": "class", "doc": "<p>This is the template class for visualizer item.\nThere should never be an instance of this class.\nA visualizer item is a part of the visualizer model\nthat is not drawn in any ways on the model view\nbut can be represented in the gui.</p>\n\n<p><strong>Attributes</strong>:</p>\n\n<ul>\n<li><strong>_kind_name</strong>: str     -   The name of this kind of object.</li>\n<li><strong>_ID</strong>: int            -   The id of this object.</li>\n<li><strong>_model</strong>: model.Model -   The model this object belongs to</li>\n</ul>\n"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.__init__", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ID</strong>:  int, optional -  The ID of the object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.set_model", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.set_model", "kind": "function", "doc": "<p>Sets the model of this object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  model.Model   -   The model this object belongs to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.get_model", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.get_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.get_id", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.get_id", "kind": "function", "doc": "<p>Returns the id of the object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int - The id of the object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.get_kind_name", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.get_kind_name", "kind": "function", "doc": "<p>Returns the kind name of the object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str - The kind name of the object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.on_step_update", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.on_step_update", "kind": "function", "doc": "<p>This function is called by the model every time a step forward\nwas made. It defines the object specific behavior for time steps.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:  int - the current time step.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.on_step_undo", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.on_step_undo", "kind": "function", "doc": "<p>This function is called by the model every time a step backwards\nwas made. It defines the object specific behavior for time steps.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:  int -  the current time step.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.VisualizerItem.restart", "modulename": "mapf_simulation.visualizerItem", "qualname": "VisualizerItem.restart", "kind": "function", "doc": "<p>Resets the object to its original values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS", "kind": "class", "doc": "<p>This class represents a task. It consists out of one\nor more checkpoints. A task is completed when a robot\nhas visited all checkpoints in a certain order.</p>\n\n<p><strong>Attributes</strong>:  </p>\n\n<ul>\n<li><strong>_kind_name</strong>: str                         -   The name of this kind of object. This is always 'task_ros'  </li>\n<li><strong>_robot</strong>:  visualizerGraphicItem.Robot    -   The robot to fulfill the task  </li>\n<li><strong>_changed</strong>: bool                          -   Saves whether this request was edited at the last time step  </li>\n<li><strong>_checkpoints</strong>: a list of visualizerGraphicItem.Checkpoint  -   A list of checkpoints  </li>\n<li><strong>_open</strong>:  -   a list of tuples that contains the name and the checkpoint.</li>\n<li><strong>_history</strong>:   -   a list of visited checkpoints</li>\n</ul>\n", "bases": "VisualizerItem"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.__init__", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ID</strong>:  int, optional -  The ID of the object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.set_robot", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.set_robot", "kind": "function", "doc": "<p>Assigns a robot to a task.\nAlso adds this task to the robots tasks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>robot</strong>:  visualizerGraphicItem.RobotROS -  the robot to which this task should be assigned</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">robot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.get_robot", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.get_robot", "kind": "function", "doc": "<p>Returns the assigned robot - <strong>visualizerGraphicItem.RobotROS</strong></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.get_robot_id", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.get_robot_id", "kind": "function", "doc": "<p>Returns the id of the assigned robot - <strong>int</strong></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.on_step_update", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.on_step_update", "kind": "function", "doc": "<p>Resets the changed flag at every time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:  int - the current time step.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.on_step_undo", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.on_step_undo", "kind": "function", "doc": "<p>Resets the changed flag at every time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_step</strong>:  int - the current time step.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.add_checkpoint", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.add_checkpoint", "kind": "function", "doc": "<p>Adds a new checkpoint to the task.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>checkpoint_id</strong>:  int -  The id of the checkpoint</li>\n<li><strong>name</strong>:  str -  The name of the checkpoint</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">checkpoint_id</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.visit_checkpoint", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.visit_checkpoint", "kind": "function", "doc": "<p>This function is called when the assigned robot to this task has reached a checkpoint.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>checkpoint</strong>:  visualizerGraphicItem.Checkpoint -  The checkpoint that was reached</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">checkpoint</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.unvisit_checkpoint", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.unvisit_checkpoint", "kind": "function", "doc": "<p>This function will be called if a time step was undone \nin which a checkpoint was reached.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>checkpoint</strong>:  visualizerGraphicItem.Checkpoint -  The checkpoint that was reached</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">checkpoint</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.unvisit_all_checkpoints", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.unvisit_all_checkpoints", "kind": "function", "doc": "<p>This function deletes the history of visited checkpoints and marks every checkpoint assigned to this task as not visited</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.get_changed", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.get_changed", "kind": "function", "doc": "<p>Returns whether this task has been changed in this time step.\nReturns true if a checkpoint was reached.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.get_checkpoints", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.get_checkpoints", "kind": "function", "doc": "<p>Returns the list of checkpoints.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of tuples, where every tuple is (checkpoint, name) <br />\n  = (visualizerGraphicItem.CheckpointROS, str)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.get_checkpoint_history", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.get_checkpoint_history", "kind": "function", "doc": "<p>Returns the history of reached checkpoints.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the list of names of visited checkpoints (list of str)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mapf_simulation.visualizerItem.TaskROS.get_open_checkpoints", "modulename": "mapf_simulation.visualizerItem", "qualname": "TaskROS.get_open_checkpoints", "kind": "function", "doc": "<p>Returns a list of unreached checkpoints.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the list of names of unvisited checkpoints (list of str)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();